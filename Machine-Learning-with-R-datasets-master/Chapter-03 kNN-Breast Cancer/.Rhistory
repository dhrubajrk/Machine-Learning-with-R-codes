install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
install.packages("gglpot")
install.packages("ggplot")
install.packages("caret")
install.packages("kernlab")
install.packages("kernlab")
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("class")
install.packages("class")
install.packages("class")
install.packages("caret")
install.packages("caret")
install.packages("mass")
install.packages("MASS")
install.packages("class")
library("car", lib.loc="~/R/win-library/3.2")
library("caret", lib.loc="~/R/win-library/3.2")
library("class", lib.loc="~/R/win-library/3.2")
library("curl", lib.loc="~/R/win-library/3.2")
library("dplyr", lib.loc="~/R/win-library/3.2")
library("kernlab", lib.loc="~/R/win-library/3.2")
library("lubridate", lib.loc="~/R/win-library/3.2")
library("NLP", lib.loc="~/R/win-library/3.2")
library("plyr", lib.loc="~/R/win-library/3.2")
detach("package:car", unload=TRUE)
detach("package:caret", unload=TRUE)
detach("package:class", unload=TRUE)
detach("package:curl", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:kernlab", unload=TRUE)
detach("package:lubridate", unload=TRUE)
detach("package:NLP", unload=TRUE)
detach("package:plyr", unload=TRUE)
install.packages("dataset")
install.packages("datasets")
getwd()
setwd("G:/R Study/Machine-Learning-with-R-datasets-master/Chapter-03 kNN-Breast Cancer")
getwd()
read.csv("data/wisc_bc_data.csv",stringsAsFactors = F)
bc.data<-read.csv("data/wisc_bc_data.csv",stringsAsFactors = F)
names(bc.data)
str(bc.data)
length(which(bc.data$diagnosis=="M"))
length(which(bc.data$diagnosis=="B"))
bc.data<-bc.data[-1]
table(bc.data$diagnosis)
?as.factor
bc.data$diagnosis<-factor(bc.data$diagnosis,levels = c("M","B"),labels = c("Malignant","Beneign"))
table(bc.data$diagnosis)
prop.table(table(bc.data$diagnosis))
round(prop.table(table(bc.data$diagnosis))*100,digits = 1)
names(bc.data)
summary(bc.data["radius_mean","area_mean","smoothness_mean"])
summary(bc.data[c("radius_mean","area_mean","smoothness_mean")])
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
bc.data_n<-as.data.frame(lapply(c[2:31], normalize))
bc.data_n<-as.data.frame(lapply(bc.data[2:31], normalize))
summary(bc.data)
summary(bc.data_n)
library(caret)
install.packages("caret")
library(caret)
install.packages("iterators")
library(caret)
bc.train<-createDataPartition(bc.data_n,p=0.75,list = F)
View(bc.data)
bc.data_n$diagnosis<-bc.data$diagnosis
bc.train<-createDataPartition(bc.data_n$diagnosis,p=0.75,list = F)
View(bc.train)
bc.traindata<-bc.data_n[bc.train]
bc.traindata<-bc.data_n[bc.train,]
View(bc.traindata)
View(bc.data_n)
bc.testdata<-bc.data_n[-bc.train,]
train<-createDataPartition(bc.data_n$diagnosis,p=0.8,list = F)
bc.traindata<-bc.data_n[train,]
bc.testdata<-bc.data_n[-train,]
train.labels<-bc.data_n[train,diagnosis]
train.labels<-bc.data_n[train,bc.data$diagnosis]
View(train.labels)
View(bc.data)
train.labels<-bc.data_n$diagnosis[train]
table(train.labels)
test.labels<-bc.data_n$diagnosis[-train]
table(test.labels)
prop.table(table(train.labels))
prop.table(table(test.labels))
library(class)
?knn
rm(bc.train)
bc.traindata<-bc.traindata[,-diagnosis]
View(bc.traindata)
bc.traindata<-bc.traindata[,-bc.traindata$diagnosis]
bc.traindata<-bc.traindata[-diagnosis]
bc.traindata<-bc.traindata[-bc.traindata$diagnosis]
bc.traindata<-bc.traindata[-bc.traindata$diagnosis,]
View(bc.traindata)
bc.traindata<-bc.data_n[train,]
bc.testdata<-bc.data_n[-train,]
train.labels<-bc.data_n$diagnosis[train]
table(train.labels)
test.labels<-bc.data_n$diagnosis[-train]
table(test.labels)
prop.table(table(train.labels))
prop.table(table(test.labels))
library(class)
?knn
bc.traindata<-bc.traindata[-31]
View(bc.traindata)
bc.testdata<-bc.testdata[-31]
sqrt(456)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=21)
length(which(prediction==test.labels))
install.packages("gmodels")
install.packages("gmodels")
install.packages("gmodels")
install.packages("gmodels")
library(gmodels)
CrossTable(test.labels,prediction,chisq = F)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=1)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=1)
length(which(prediction==test.labels))
CrossTable(test.labels,prediction,chisq = F)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=5)
length(which(prediction==test.labels))
CrossTable(test.labels,prediction,chisq = F)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=7)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=7)
length(which(prediction==test.labels))
CrossTable(test.labels,prediction,chisq = F)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=11)
length(which(prediction==test.labels))
CrossTable(test.labels,prediction,chisq = F)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=13)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=13)
prediction<-knn(bc.traindata,bc.testdata,train.labels,k=13)
length(which(prediction==test.labels))
CrossTable(test.labels,prediction,chisq = F)
bc.data_z<-as.data.frame(scale(bc.data[-1]))
train<-createDataPartition(bc.data$diagnosis,p=0.8,list=FALSE)
bc.traindata<-bc.data_z[train,]
bc.testdata<-bc.data_z[-train,]
train.labels<-bc.data$diagnosis[train]
test.labels<-bc.data$diagnosis[-train]
prediction_z<-knn(bc.traindata,bc.testdata,train.labels,k=13)
length(which(prediction_z==test.labels))
CrossTable(test.labels,prediction_z,chisq = F)
data(iris)
data(iris)
str(iris)
View(iris)
prop(table(iris$Species))
prop.table(table(iris$Species))
normalize<-function(x){
return((x-min(x))/(max(x)-min(x)))
}
iris_n<-as.data.frame(lapply(iris[c(1:4)],normalize))
library(caret)
train<-createDataPartition(iris$Species,p=.8,list=F)
iris.traindata<-iris_n[train,]
iris.testdata<-iris_n[-train,]
train.labels<-iris$Species[train]
test.labels<-iris$Species[-train]
library(class)
sqrt(120)
prediction<-knn(iris.traindata,iris.testdata,train.labels,k=11)
library(gmodels)
CrossTable(test.labels,prediction,chisq = F)
prediction<-knn(iris.traindata,iris.testdata,train.labels,k=9)
#use crossTable to see results
library(gmodels)
CrossTable(test.labels,prediction,chisq = F)
prediction<-knn(iris.traindata,iris.testdata,train.labels,k=5)
#use crossTable to see results
library(gmodels)
CrossTable(test.labels,prediction,chisq = F)
prediction<-knn(iris.traindata,iris.testdata,train.labels,k=13)
#use crossTable to see results
library(gmodels)
CrossTable(test.labels,prediction,chisq = F)
knn
